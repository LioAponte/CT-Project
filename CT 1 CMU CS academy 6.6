pip install cmu-graphics
from cmu-graphics import *
# CS2 Unit 6.2.2 Creative Task (Nearest Neighbor Classification) Sample

# potential upgrades
# - added general comment statements
# - added descriptions for all functions
# - formatted some of the data so it is easier to match to the labels
# - added whitespace (blank lines & spaces) for better style
# - (fix updateRanges in main function so xMax & yMax automatically adjust to the smallest and largest values in app.data)
### - make the axes labels bold ###
### - add custom graphics as plotted points
### - round the decimal numbers on the axes labels
# - add constants
# - read the data from an external file or a web-based data source (big data or an online API)
# - port the code to replit or the desktop version of CMU CS Graphics
### - post the code at github
###### canvas setup

app.background = rgb(245, 245, 245)

###### functions

def drawKey():
    # displays key for the graph
    
    cx = 70
    cy = 55
    
    for index in range(len(app.categories)):
        category = app.categories[index]
        color = app.colors[index]

        Star(cx, cy, 5, 10, fill = color)
        Label(category, cx + 10, cy, align = 'left')
        cy += 15


def parseData():
    # extracts points to plot from app.data
    
    labelsOnly = [ ]
    featuresOnly = [ ]
    xData = [ ]
    yData = [ ]
    colors = [ ]
    
    for row in app.data:
        labelsOnly.append(row[0])
        featuresOnly.append([ row[1], row[2] ])

        xData.append(row[1])
        yData.append(row[2])
        color = app.colors[row[0]]
        colors.append(color)

    return labelsOnly, featuresOnly, xData, yData, colors

def myDistance(point, otherPoint):
    # computes distance between two points
    
    dist = 0
    
    for index in range(len(point)):
        dist += (point[index] - otherPoint[index]) ** 2
        
    return dist ** 0.5

def findNearestNeighbor(mysteryPoint, featuresOnlyList):
    # finds the closest point 
    
    closestDistance = 10 ** 10
    closestNeighbor = None

    for index in range(len(featuresOnlyList)):
        neighbor = featuresOnlyList[index]
        dist = myDistance(mysteryPoint, neighbor)
        
        if (dist < closestDistance):
            closestDistance = dist
            closestNeighbor = app.data[index]

    return closestNeighbor

def onMousePress(mouseX, mouseY):
    # allows user to manually click and place new points
    
    xVal, yVal = manager.getDataFromPosition(mouseX, mouseY)
    mysteryXData = [xVal]
    mysteryYData = [yVal]
    neighbor = findNearestNeighbor([mysteryXData[0], mysteryYData[0]], app.featuresOnly)
    color = app.colors[neighbor[0]]

    manager.plotPoints(mysteryXData, mysteryYData, color=color, resizeToNewPlot = False)

def main():
    # main program
    
    labelsOnly, app.featuresOnly, xData, yData, colors = parseData()
    manager.plotPoints(xData, yData, color=colors)
    manager.updateRanges(xMin = 0, xMax = 32, yMin = 0, yMax = 27.5)

    drawKey()

###### classes

class PlotManager(object):
    def __init__(self, left=85, bottom=345, width=300, height=300, title='', xLabel='', yLabel=''):
        self.left = left
        self.bottom = bottom
        self.width = width
        self.height = height
        self.title = title

        self.xRange = [ 0, 0 ]
        self.yRange = [ 0, 0 ]

        self.plots = [ ]

        self.tickDrawings = Group()
        self.drawing = Group(self.tickDrawings)
        self.drawAxes(xLabel, yLabel)
### Axis
    def drawAxes(self, xLabel, yLabel):
        l, b, w, h = self.left, self.bottom, self.width, self.height
        self.drawing.add(
            Line(l, b - h, l, b + 5, fill='silver', lineWidth=3),
            Line(l - 5, b, l + w, b, fill='silver', lineWidth=3),
            Label(self.title, l + (w / 2), b - h - 10, size=14),
            Label(xLabel, l + w / 2, b + 30, bold = True),
            Label(yLabel, l - 40, b - h / 2, rotateAngle=-90, bold = True)
            )
        

    def getKDecimalPlaces(self, num, k):
        num = ((num * (10 ** k)) // 1) / (10 ** k)
        if (k <= 0):
            return int(num)
        else:
            return num

    def drawTicks(self, xPositions=None, xLabels=None, yPositions=None, yLabels=None, precision=[1,1], offsetX=False, offsetY=False):
        xPosDefaults, xLabDefaults, yPosDefaults, yLabDefaults = [], [], [], []
        xLen = 11 if xLabels == None else len(xLabels)
        yLen = 11 if yLabels == None else len(yLabels)
        xOffset = 0 if offsetX == False else 0.5
        yOffset = 0 if offsetY == False else 0.5

        for i in range(xLen):
            xVal = self.xRange[0] + (i + xOffset) * (self.xRange[1] - self.xRange[0]) / (xLen - 2 * (0.5 - xOffset))
            xPos, yPos = self.getPositionFromData(xVal, 0)
            xPosDefaults.append(xPos)
            xLabDefaults.append(xVal)

        for i in range(yLen-1, -1, -1):
            yVal = self.yRange[0] + (i + yOffset) * (self.yRange[1] - self.yRange[0]) / (yLen - 2 * (0.5 - yOffset))
            xPos, yPos = self.getPositionFromData(0, yVal)
            yPosDefaults.append(yPos)
            yLabDefaults.append(yVal)

        if (xPositions == None):
            xPositions = xPosDefaults
        if (xLabels == None):
            xLabels = xLabDefaults
        if (yPositions == None):
            yPositions = yPosDefaults
        if (yLabels == None):
            yLabels = yLabDefaults

        l, b = self.left, self.bottom
        self.tickDrawings.clear()
### Bar graph Numbers
        for ind in range(len(xPositions)):
            xPos = xPositions[ind]
            xLab = xLabels[ind]
            if (isinstance(xLab, int) or isinstance(xLab, float)):
                xLab = self.getKDecimalPlaces(xLab, precision[0])
            self.tickDrawings.add(
                Line(xPos, b - 3, xPos, b + 3, fill='silver'),
                Label(xLab, xPos, b + 5, rotateAngle=-20, align='top'),
                )

        for ind in range(len(yPositions)):
            yPos = yPositions[ind]
            yLab = yLabels[ind]
            if (isinstance(yLab, int) or isinstance(yLab, float)):
                yLab = self.getKDecimalPlaces(yLab, precision[1])
            self.tickDrawings.add(
                Line(l - 3, yPos, l + 3, yPos, fill='silver'),
                Label(yLab, l - 7, yPos, align='right'),
                )
    # get x,y coordinate (pixels) on the 400 x 400 grid from the x, y 
    # values of the point wrt the label axes
    def getPositionFromData(self, dataXVal, dataYVal):
        xMin, xMax = self.xRange[0], self.xRange[1]
        yMin, yMax = self.yRange[0], self.yRange[1]

        xPos = self.left + ((dataXVal - xMin) * self.width) / (xMax - xMin)
        yPos = self.bottom - ((dataYVal - yMin) * self.height) / (yMax - yMin)
        return xPos, yPos

    def getDataFromPosition(self, xPos, yPos):
        xMin, xMax = self.xRange[0], self.xRange[1]
        yMin, yMax = self.yRange[0], self.yRange[1]

        dataXVal = ((xPos - self.left) * (xMax - xMin)) / self.width + xMin
        dataYVal = ((self.bottom - yPos) * (yMax - yMin)) / self.height + yMin
        return dataXVal, dataYVal

    def updateRanges(self, xMin=None, xMax=None, yMin=None, yMax=None):
        if (xMin != None):
            self.xRange[0] = xMin
        if (xMax != None):
            self.xRange[1] = xMax
        if (yMin != None):
            self.yRange[0] = yMin
        if (yMax != None):
            self.yRange[1] = yMax

        for plot in self.plots:
            plot.updateDrawing()
        self.drawTicks()

    def removePlot(self, plot):
        if (plot not in self.plots):
            print('Plot does not exist')
            return
        self.plots.remove(plot)
        plot.drawing.visible = False

    def createPlot(self, xData, yData, plotType, color, resizeToNewPlot):
        if (len(xData) != len(yData)):
            print('Data lists were not the same length. Cannot plot!')
            return
        if ((isinstance(color, list) == True) and (len(color) != len(xData))):
            print('Color list and data were not the same length. Using default color!')
            color = 'black'

        newPlot = Plot(self, plotType, xData, yData)

        if (resizeToNewPlot == True):
            self.updateRanges(xMin=newPlot.xRange[0], xMax=newPlot.xRange[1],
                            yMin=newPlot.yRange[0], yMax=newPlot.yRange[1])

        newPlot.draw(color=color)
        self.plots.append(newPlot)
        self.drawing.toFront()
        return newPlot

    def plotPoints(self, xData, yData, color='black', resizeToNewPlot=True):
        return self.createPlot(xData, yData, 'scatter', color, resizeToNewPlot)

    def plotLines(self, xData, yData, color='black', resizeToNewPlot=True):
        return self.createPlot(xData, yData, 'line', color, resizeToNewPlot)

    def plotHorizontalBars(self, xData, yPositions=None, color='black', resizeToNewPlot=True):
        if (yPositions == None):
            yPositions = [ ]
            numBars = len(xData)
            top = self.bottom - self.height
            for i in range(numBars):
                yPositions.append(top + (i + 0.5) * (self.height / numBars))

        return self.createPlot(xData, yPositions, 'horiz bar', color, resizeToNewPlot)

    def plotVerticalBars(self, yData, xPositions=None, color='black', resizeToNewPlot=True):
        if (xPositions == None):
            xPositions = [ ]
            numBars = len(yData)
            for i in range(numBars):
                xPositions.append(self.left + (i + 0.5) * (self.width / numBars))

        return self.createPlot(xPositions, yData, 'vert bar', color, resizeToNewPlot)

class Plot(object):
    def __init__(self, manager, plotType, xData, yData):
        self.manager = manager
        self.plotType = plotType

        self.xData = xData
        self.yData = yData

        self.getDataRanges()
        self.drawing = Group()

    def getDataRanges(self):
        # Used in Graph.updateRanges()
        self.xRange = [ 10 ** 10, -10 ** 10 ]
        self.yRange = [ 10 ** 10, -10 ** 10 ]

        for xVal in self.xData:
            if (xVal < self.xRange[0]):
                self.xRange[0] = xVal
            if (xVal > self.xRange[1]):
                self.xRange[1] = xVal
        for yVal in self.yData:
            if (yVal < self.yRange[0]):
                self.yRange[0] = yVal
            if (yVal > self.yRange[1]):
                self.yRange[1] = yVal

        if (self.xData == [ ]):
            self.xRange = [ 0, 1 ]
        if (self.yData == [ ]):
            self.yRange = [ 0, 1 ]

    def getDatapointColor(self, index):
        if (isinstance(self.color, list) == True):
            if (index < len(self.color)):
                color = self.color[index]
            else:
                color = 'black'
        else:
            color = self.color
        return color

    def updateColor(self, newColor):
        self.color = newColor
        for ind in range(len(self.drawing.children)):
            shape = self.drawing.children[ind]
            shape.fill = self.getDatapointColor(ind)

    def updateData(self, newXData=None, newYData=None, resizeRanges=False):
        if (newXData != None):
            self.xData = newXData
        elif (self.plotType == 'vert bar'):
            newXData = [ ]
            numBars = len(newYData)
            for i in range(numBars):
                newXData.append(self.manager.left + (i + 0.5) * (self.manager.width / numBars))
            self.xData = newXData
        if (newYData != None):
            self.yData = newYData
        elif (self.plotType == 'horiz bar'):
            newYData = [ ]
            numBars = len(newXData)
            top = self.manager.bottom - self.manager.height
            for i in range(numBars):
                newYData.append(top + (i + 0.5) * (self.manager.height / numBars))
            self.yData = newYData
        if (len(newXData) != len(newYData)):
            print('Data lists were not the same length. Cannot plot!')
            return
        if (len(newXData) == 0):
            return

        self.getDataRanges()
        if (resizeRanges == True):
            self.manager.updateRanges(xMin=self.xRange[0], xMax=self.xRange[1],
                                    yMin=self.yRange[0], yMax=self.yRange[1])

        prevXVal, prevYVal = newXData[0], newYData[0]
        for ind in range(len(newXData)):
            xVal, yVal = newXData[ind], newYData[ind]
            if (ind < len(self.drawing.children)):
                shape = self.drawing.children[ind]
                if (self.plotType == 'scatter'):
                    shape.datapoint = [ xVal, yVal ]
                elif (self.plotType =='line'):
                    shape.datapoint = [ [ prevXVal, prevYVal ], [ xVal, yVal ] ]
                elif (self.plotType == 'horiz bar'):
                    shape.datapoint = [ xVal, yVal ]
                elif (self.plotType == 'vert bar'):
                    shape.datapoint = [ xVal, yVal ]
                self.updateDatapointShape(shape)
            else:
                color = self.getDatapointColor(ind)
                self.drawDatapoint(xVal, yVal, prevXVal, prevYVal, color)

            prevXVal, prevYVal = xVal, yVal

        if (len(newXData) < len(self.drawing.children)):
            for i in range(ind, len(self.drawing.children)):
                shape = self.drawing.children[i]
                self.drawing.remove(shape)

    def updateDatapointShape(self, shape):
        if (self.plotType == 'scatter'):
            xVal, yVal = shape.datapoint
            newXPos, newYPos = self.manager.getPositionFromData(xVal, yVal)
            shape.centerX, shape.centerY = newXPos, newYPos
        elif (self.plotType =='line'):
            pt1, pt2 = shape.datapoint
            shape.x1, shape.y1 = self.manager.getPositionFromData(pt1[0], pt1[1])
            shape.x2, shape.y2 = self.manager.getPositionFromData(pt2[0], pt2[1])
        elif (self.plotType == 'horiz bar'):
            xVal, yVal = shape.datapoint
            shape.x2, y = self.manager.getPositionFromData(xVal, yVal)
            shape.centerY = yVal
        elif (self.plotType == 'vert bar'):
            xVal, yVal = shape.datapoint
            x, shape.y2 = self.manager.getPositionFromData(0, yVal)
            shape.centerX = xVal
######Shape Location
    def updateDrawing(self):
        for shape in self.drawing:
            self.updateDatapointShape(shape)

    def drawDatapoint(self, xVal, yVal, prevXVal, prevYVal, color):
        graphX, graphY = self.manager.getPositionFromData(xVal, yVal)
        if (self.plotType == 'scatter'):
            ###### SHAPE LOCATION
            shape = Star(graphX, graphY, 5, 10, fill=color, opacity=40)
            shape.datapoint = [ xVal, yVal ]
        elif (self.plotType == 'line'):
            prevGraphX, prevGraphY = self.manager.getPositionFromData(prevXVal, prevYVal)
            shape = Line(prevGraphX, prevGraphY, graphX, graphY, fill=color)
            shape.datapoint = [ [ prevXVal, prevYVal ], [ xVal, yVal ] ]
            prevXVal = xVal
            prevYVal = yVal
        elif (self.plotType == 'horiz bar'):
            height = self.manager.height / (len(self.xData) * 1.5)
            shape = Line(self.manager.left, yVal, graphX, yVal, fill=color, lineWidth=height)
            shape.datapoint = [ xVal, yVal ]
        elif (self.plotType == 'vert bar'):
            width = self.manager.width / (len(self.yData) + 1)
            shape = Line(xVal, self.manager.bottom, xVal, graphY, fill=color, lineWidth=width)
            shape.datapoint = [ xVal, yVal ]
        else:
            print('Invalid plot type!')

        self.drawing.add(shape)
        return prevXVal, prevYVal

    def draw(self, color):
        self.color = color
        if (len(self.xData) == 0):
            return

        prevXVal = self.xData[0]
        prevYVal = self.yData[0]
        for index in range(len(self.xData)):
            xVal = self.xData[index]
            yVal = self.yData[index]
            color = self.getDatapointColor(index)
            prevXVal, prevYVal = self.drawDatapoint(xVal, yVal, prevXVal, prevYVal, color)

manager = PlotManager(left=50, bottom=350, width=300, height=300,
                      title='Classification Data',
                      xLabel='Category 2',
                      yLabel='Category 1')

###### data

app.categories = ['Category 1', 'Category 2', 'Category 3', 'Category 4', 'Category 5']
app.colors =  [ 'blue'     , 'orange'    , 'green'     , 'red'       , 'purple'    ]
app.data =    [
        # [ label (category index),        Characteristic 1,       Characteristic 2 ]
          [        0              ,               15.33    ,              8.5       ],
          [        0              ,               13.33    ,              9.45      ],
          [        1              ,               27.73    ,             20.85      ],
          [        1              ,               30.13    ,             17.85      ],
          [        1              ,               30.73    ,             20.85      ],
          [        2              ,               25.68    ,             10.1       ],
          [        0              ,               11.63    ,              8.35      ],
          [        2              ,               26.33    ,             10.4       ],
          [2, 25.28, 9.05],
        [0, 11.63, 7.15],
        [1, 26.03, 25.75],
        [4, 18.83, 6.8],
        [1, 27.63, 24.3],
        [3, 10.08, 4.65],
        [3, 11.18, 4.75],
        [3, 10.18, 5.5],
        [0, 13.48, 8.15],
        [4, 17.23, 7.25],
        [0, 14.33, 7.5],
        [0, 13.38, 7],
        [0, 12.58, 7.65],
        [2, 25.03, 8.8],
        [1, 27.03, 23.7],
        [0, 14.23, 8.15],
        [1, 25.83, 21.8],
        [2, 25.43, 10.8],
        [0, 14.48, 9.5],
        [0, 14.08, 7.75],
        [1, 31.98, 24.1],
        [1, 27.08, 20.4],
        [2, 24.98, 11.45],
        [1, 26.28, 21.9],
        [1, 27.18, 26.8],
        [1, 31.53, 20.1],
        [1, 24.83, 25.4],
        [4, 18.33, 7.3],
        [1, 29.48, 27.05],
        [1, 25.13, 23.55],
        [1, 26.88, 20.65],
        [1, 28.58, 21.5],
        [1, 32.48, 22],
        [1, 27.33, 23],
        [3, 9.53, 4],
        [0, 13.08, 7.6],
        [0, 12.73, 6.75],
        [2, 25.23, 11.9],
        [2, 26.48, 11.55],
        [1, 27.98, 24.05],
        [2, 24.48, 9.2],
        [1, 27.48, 23.25],
        [3, 11.58, 5.2],
        [1, 28.58, 24.3],
        [3, 10.23, 4.2],
        [4, 16.68, 5],
        [4, 17.08, 6.1],
        [2, 24.63, 13.3],
        [4, 17.23, 6.1],
        [1, 27.88, 21.8],
        [2, 26.63, 10.1],
        [1, 26.23, 23.9],
        [0, 15.63, 8.8],
        [1, 28.38, 23.4],
        [1, 25.03, 20.45],
        [0, 12.43, 7.3],
        [1, 27.58, 23.15],
        [1, 27.98, 26.95],
        [1, 30.73, 24.85],
        [1, 28.63, 24.7],
        [4, 17.43, 7.1],
        [1, 27.18, 24.25],
        [3, 9.48, 5.1],
        [3, 9.78, 4.1],
        [0, 15.23, 9.05],
        [1, 28.43, 23.7],
        [3, 9.18, 3.05],
        [0, 12.23, 9.25],
        [4, 17.18, 6.7],
        [3, 11.23, 4.6],
        [4, 18.73, 5.6],
        [2, 25.78, 10.9],
        [0, 13.53, 7.65],
        [1, 25.08, 18.55],
        [0, 12.78, 8.3],
        [0, 11.68, 9.05],
        [1, 29.48, 22.3],
        [1, 27.28, 24.2],
        [3, 11.03, 5.45],
        [1, 24.93, 22.45],
        [2, 24.18, 11.55],
        [4, 16.53, 6.8],
        [1, 28.48, 22.8],
        [1, 27.78, 27],
        [0, 11.63, 7.45],
        [0, 13.58, 6.3],
        [2, 24.83, 9.45],
        [1, 30.58, 19.45],
        [1, 25.88, 27.55],
        [3, 10.53, 5.5],
        [4, 17.68, 6.2],
        [3, 9.08, 4.15],
        [4, 17.23, 6.1],
        [4, 16.98, 6.75],
        [1, 29.93, 26.45],
        [2, 27.03, 12.05],
        [0, 12.38, 8],
        [0, 14.98, 9.25],
        [1, 26.53, 22.3],
        [2, 24.68, 11.1],
        [1, 30.53, 23.35],
        [1, 27.78, 18.85],
        [1, 29.03, 23.25],
        [4, 17.83, 6.45],
        [4, 16.63, 7.6],
        [4, 17.53, 6.45],
        [1, 26.78, 22.35],
        [0, 14.83, 8.05],
        [1, 27.48, 25.15],
        [1, 28.38, 22.3],
        [1, 28.58, 24.25],
        [3, 10.58, 4.15],
        [3, 10.03, 5.4],
        [1, 29.58, 23.7],
        [4, 16.48, 6.3],
        [1, 28.88, 22.55],
        [1, 27.83, 19.2],
        [4, 17.83, 4.95],
        [2, 25.53, 11.2],
        [3, 9.58, 5.2],
        [1, 30.28, 21.5],
        [1, 29.78, 22.4],
        [1, 28.83, 20.7],
        [1, 28.58, 23.85],
        [2, 25.18, 13.2],
        [1, 26.93, 22.6],
        [2, 23.73, 10.75],
        [1, 27.93, 20.45],
        [1, 28.33, 25.5],
        [2, 24.73, 11],
        [0, 12.33, 6.15],
        [1, 24.58, 21.6],
        [1, 29.73, 19.05],
        [2, 23.83, 10.05],
        [1, 28.23, 24.05],
        [1, 29.68, 21.5],
        [1, 31.53, 19.55],
        [3, 9.93, 4.85],
        [1, 24.63, 21.05],
        [2, 25.68, 11.7],
        [2, 24.58, 10.7],
        [4, 17.68, 4.85],
        [1, 27.23, 22.1],
        [2, 26.28, 9.25],
        [3, 10.48, 4.45],
        [3, 9.18, 4.8],
        [0, 12.78, 8.4],
        [1, 31.13, 23.2],
        [1, 28.98, 24.6],
        [0, 12.88, 9.25],
        [2, 26.98, 9.95],
        [1, 26.08, 20.05],
        [2, 26.43, 12.95],
        [0, 12.43, 9.05],
        [2, 25.13, 11.45],
        [3, 11.33, 4.45],
        [0, 13.78, 9.45],
        [1, 31.93, 26],
        [1, 27.38, 22.7],
        [4, 16.38, 6.25],
        [0, 13.48, 8.15],
        [2, 25.03, 10.55],
        [1, 28.03, 21.65],
        [4, 16.08, 7.45],
        [0, 12.9, 7.95],
        [1, 26.48, 26.1],
        [4, 17.43, 5.5],
        [1, 26.08, 19.05],
        [0, 13.88, 7.55],
        [4, 17.08, 6.35],
        [4, 15.63, 6.6],
        [1, 28.83, 23.25],
        [1, 29.03, 17.85],
        [1, 29.03, 22.6],
        [4, 17.68, 6.65],
        [1, 24.33, 24.3],
        [1, 27.18, 16.25],
        [4, 18.93, 6.25],
        [1, 29.03, 21.95],
        [1, 30.78, 22],
        [1, 29.13, 20.3],
        [4, 16.48, 5.45],
        [2, 25.08, 9.75],
        [2, 25.78, 9.6],
        [2, 25.53, 9.65],
        [2, 25.68, 9.35],
        [3, 10.88, 5.4],
        [0, 12.18, 6.8],
        [1, 27.83, 24.8],
        [1, 25.13, 23.2],
        [1, 25.28, 24.75],
        [4, 17.43, 7.6],
        [4, 16.63, 6.1],
        [0, 13.53, 8.5],
        [0, 12.78, 9.25],
        [4, 16.98, 5.4],
        [1, 26.88, 18.05],
        [1, 28.68, 18.7]
]


###### main program 
cmu_graphics.run()

main()
